name: CI/CD Pipeline

on:
  push:
    branches: 
      - master
      - develop
      - 'release/**'
      - 'hotfix/**'
      - 'feature/**'
  pull_request:
    branches: 
      - master
      - develop
  workflow_dispatch:
    inputs:
      force_docker_build:
        description: 'Force Docker image build regardless of branch'
        required: false
        default: 'false'
        type: boolean

env:
  DOTNET_VERSION: '8.0.x'
  DOCKER_IMAGE_NAME: 'readerbuddy'

jobs:
  gitversion:
    name: Calculate Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.gitversion.outputs.semVer }}
      fullVersion: ${{ steps.gitversion.outputs.fullSemVer }}
      assemblyVersion: ${{ steps.gitversion.outputs.assemblySemVer }}
      informationalVersion: ${{ steps.gitversion.outputs.informationalVersion }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.10.2
        with:
          versionSpec: '5.x'

      - name: Determine Version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.10.2
        with:
          useConfigFile: true

      - name: Display GitVersion outputs
        run: |
          echo "SemVer: ${{ steps.gitversion.outputs.semVer }}"
          echo "FullSemVer: ${{ steps.gitversion.outputs.fullSemVer }}"
          echo "AssemblySemVer: ${{ steps.gitversion.outputs.assemblySemVer }}"
          echo "InformationalVersion: ${{ steps.gitversion.outputs.informationalVersion }}"

  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: gitversion
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore -p:Version=${{ needs.gitversion.outputs.version }} -p:AssemblyVersion=${{ needs.gitversion.outputs.assemblyVersion }} -p:InformationalVersion=${{ needs.gitversion.outputs.informationalVersion }}

      - name: Test
        run: dotnet test --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./coverage

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: ./coverage

      - name: Publish Web API
        run: dotnet publish src/ReaderBuddy.WebApi/ReaderBuddy.WebApi.csproj --configuration Release --no-build --output ./publish/webapi -p:Version=${{ needs.gitversion.outputs.version }}

      - name: Upload Web API artifacts
        uses: actions/upload-artifact@v4
        with:
          name: webapi-${{ needs.gitversion.outputs.version }}
          path: ./publish/webapi

  build-client:
    name: Build React Client
    runs-on: ubuntu-latest
    needs: gitversion
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: client/package-lock.json

      - name: Install client dependencies
        working-directory: client
        run: npm ci

      - name: Build client
        working-directory: client
        run: npm run build

      - name: Upload client artifacts
        uses: actions/upload-artifact@v4
        with:
          name: client-${{ needs.gitversion.outputs.version }}
          path: client/build

  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [gitversion, build-and-test]
    if: |
      (github.ref == 'refs/heads/master' || 
       startsWith(github.ref, 'refs/heads/hotfix/') || 
       github.event.inputs.force_docker_build == 'true') &&
      github.event_name != 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: |
            ${{ env.DOCKER_IMAGE_NAME }}:${{ needs.gitversion.outputs.version }}
            ${{ env.DOCKER_IMAGE_NAME }}:latest
          labels: |
            org.opencontainers.image.title=ReaderBuddy
            org.opencontainers.image.description=Reading tracking API with React UI
            org.opencontainers.image.version=${{ needs.gitversion.outputs.version }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
          build-args: |
            VERSION=${{ needs.gitversion.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Save Docker image
        run: |
          docker save ${{ env.DOCKER_IMAGE_NAME }}:${{ needs.gitversion.outputs.version }} > readerbuddy-${{ needs.gitversion.outputs.version }}.tar

      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-${{ needs.gitversion.outputs.version }}
          path: readerbuddy-${{ needs.gitversion.outputs.version }}.tar
          retention-days: 7

  create-tag:
    name: Create Git Tag
    runs-on: ubuntu-latest
    needs: [gitversion, build-and-test, build-client]
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create and push tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a v${{ needs.gitversion.outputs.version }} -m "Release v${{ needs.gitversion.outputs.version }}"
          git push origin v${{ needs.gitversion.outputs.version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [gitversion, build-and-test, build-client, docker-build]
    if: always()
    steps:
      - name: Build Summary
        run: |
          echo "## 🏗️ Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ needs.gitversion.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Full Version**: ${{ needs.gitversion.outputs.fullVersion }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Job Status" >> $GITHUB_STEP_SUMMARY
          echo "- GitVersion: ${{ needs.gitversion.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Build & Test: ${{ needs.build-and-test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Client Build: ${{ needs.build-client.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Docker Build: ${{ needs.docker-build.result }}" >> $GITHUB_STEP_SUMMARY